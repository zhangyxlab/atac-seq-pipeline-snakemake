#! /usr/bin/env bash
## Snakefile
####################
import os
import re
import json

BASE_DIR = workflow.basedir + "/../"
## First, find the samples. 
f = os.listdir("fastq")

## match file names to detect if there are any read pairs. 
m =[ re.search("(.*?)(|_1|_2|_r1|_r2|_R1|_R2)(_001)?.fastq.*",x) for x in f]
name = [x.group(1) for x in m]
for x in name:
  if name.count(x) >2:
    exit(name+" has more than two files")

FASTQ_DICT = dict()

for idx in range(len(f)):
  if name[idx] in FASTQ_DICT:
    FASTQ_DICT[name[idx]].append("fastq/"+f[idx])
  else:
    FASTQ_DICT[name[idx]] = ["fastq/"+f[idx]]

for sample in FASTQ_DICT:
  FASTQ_DICT[sample].sort()
SAMPLES = FASTQ_DICT.keys()

print(SAMPLES)
#print(FASTQ_DICT)
with open("sample_info.json",'w') as fp:
  json.dump(FASTQ_DICT,fp)

## annotation path
GENOME = config["GENOME"]
BOWTIE2_INDEX = config["BOWTIE2_INDEX_PATH"]+GENOME

# dependencies.
MARKDUP=BASE_DIR+"dependencies/picard.jar MarkDuplicates"


rule all:
  input: 
    expand("bam/{sample}.nodup.bam",sample=SAMPLES),
    expand("bigWig/{sample}.nodup.bw",sample=SAMPLES)



rule bowtie2_align:
  output: 
    bam=temp("bam/{sample}.sorted.bam")
  input:
    lambda wildcards: FASTQ_DICT[wildcards.sample]
  threads: 10 
  run:
    print(input)
    if len(input) == 1:
      middle = "-U " + str(input)
    elif len(input) == 2:
      middle = "-1 " + str(input[0]) + " -2 " + str(input[1]) + " -X 2000"
    shell(
    "bowtie2 -x {BOWTIE2_INDEX} "
    "{middle} "
    "-p {threads} |"
    "samtools view -bS |"
    "samtools sort -@ {threads} -m 4G > {output.bam}"
    )

rule bam_rmdup:
  input:
    bam = "bam/{sample}.sorted.bam",
  output:
    bam = "bam/{sample}.nodup.bam",
    bai = "bam/{sample}.nodup.bam.bai",
    qc = "qc/{sample}.dup.qc"
  log:
    "logs/markdup/{sample}.markdup.log"
  threads: 3
  shell:
    "java -Xmx12G -XX:ParallelGCThreads=3 -jar {MARKDUP} TMP_DIR=tmp/{wildcards.sample} INPUT={input.bam} OUTPUT={output.bam} METRICS_FILE={output.qc} VALIDATION_STRINGENCY=LENIENT ASSUME_SORTED=true REMOVE_DUPLICATES=true 2> {log};"
    "samtools index {output.bam}"

rule bam2bigwig:
  input:
    bam = "bam/{sample}.nodup.bam"
  output: 
    bw = "bigWig/{sample}.nodup.bw"
  threads: 6
  shell:
    "bamCoverage -b {input.bam} -o {output.bw} --outFileFormat bigwig "
    "-bs 50 --numberOfProcessors {threads} --normalizeUsing RPKM"
